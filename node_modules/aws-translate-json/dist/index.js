"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = __importDefault(require("aws-sdk"));
class AWSTranslateJSON {
    constructor(awsConfig, sourceLang = "en", tagetLangs = ["en"]) {
        this.translateJSON = (obj, langs = this.tagetLangs, displayLang = true) => __awaiter(this, void 0, void 0, function* () {
            const resp = {};
            const langsToTranslate = langs;
            for (let lang of langsToTranslate) {
                for (let key in obj) {
                    let word = "";
                    try {
                        word =
                            typeof obj[key] === "object"
                                ? (yield this.translateJSON(obj[key], [lang], false))
                                : (yield this.translateText(obj[key], this.sourceLang, lang));
                    }
                    catch (e) {
                        console.error(e);
                        word = "";
                    }
                    if (displayLang) {
                        resp[lang] = resp[lang] || {};
                        resp[lang][key] = word;
                    }
                    else {
                        resp[key] = word;
                    }
                }
            }
            return resp;
        });
        this.translateText = (text = "", sourceLang, targetLang) => new Promise((resolve, reject) => {
            if (!targetLang || !sourceLang)
                reject("Missing source or target lang");
            const params = {
                SourceLanguageCode: sourceLang,
                TargetLanguageCode: targetLang,
                Text: text
            };
            this.translate.translateText(params, (err, resp) => {
                if (err) {
                    reject(err);
                }
                resolve(resp.TranslatedText);
            });
        });
        aws_sdk_1.default.config.apiVersions = {
            translate: "2017-07-01"
        };
        if (awsConfig) {
            aws_sdk_1.default.config.update(awsConfig);
        }
        this.sourceLang = sourceLang;
        this.tagetLangs = tagetLangs;
        this.translate = new aws_sdk_1.default.Translate();
    }
}
exports.AWSTranslateJSON = AWSTranslateJSON;
